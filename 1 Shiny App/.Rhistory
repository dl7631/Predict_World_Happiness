fit <- lm(formula = form, data = forhappy)
fit
as.formula(paste0(dv, "~", paste0("`", paste(selected, collapse = "`+`"), "`")))
runApp()
library(randomForest)
?randomForest
fit <- randomForest(forhappy, formula = form, ntree = 500)
sapply(forhappy[-1], sum(is.na))
sapply(forhappy[-1], function(x) sum(is.na(x)))
selected <- names(forhappy)[4:10]
form <- as.formula(paste0(dv, "~", paste0("`", paste(selected, collapse = "`+`"), "`")))
fit <- lm(formula = form, data = forhappy)
fit
fit <- randomForest(forhappy, formula = form, ntree = 500)
fit <- randomForest(forhappy, formula = form, ntree = 500, importance = TRUE)
fit
cor(forhappy[-1])
cor(forhappy[-1])[,1]
form
glimpse(forhappy)
set.seed(123)
temp <- data.frame(dv = runif(1000),
`predictor 1` = runif(1000),
`predictor 2` = runif(1000),
`predictor 3` = runif(1000),
`predictor 4` = runif(1000),
`predictor 5` = runif(1000),
`predictor 6` = runif(1000))
names(temp)
temp <- tibble(dv = runif(1000),
`predictor 1` = runif(1000),
`predictor 2` = runif(1000),
`predictor 3` = runif(1000),
`predictor 4` = runif(1000),
`predictor 5` = runif(1000),
`predictor 6` = runif(1000))
temp
names(tibble
)
names(temp)
selected <- names(temp)[2:7]
selected
dv = "dv"
form <- as.formula(paste0(dv, "~", paste0("`", paste(selected, collapse = "`+`"), "`")))
form
fit <- lm(formula = form, data = temp)
fit
fit <- randomForest(formula = form, data = temp)
fornames <- selected
fornames
tempdf <- temp %>% select(one_of(c(dv, selected)))
tempdf
names(tempdf)[-1]
names(tempdf)[-1] <- paste0("predictor", 1:length(selected))
tempdf
dv
forformula <- as.formula(paste0(dv, " ~ ."))
forformula
fit <- randomForest(formula = forformula, data = tempdf)
fit
fit <- randomForest(formula = forformula, data = tempdf, importance = T)
fit
str(fit)
dv <- names(forhappy)[3]
selected <- names(forhappy)[4:6]
selected
names(forhappy)
dv <- names(forhappy)[3]
dv
selected <- names(forhappy)[4:6]
selected
tempdf <- temp %>% select(one_of(c(dv, selected)))
dv <- names(forhappy)[3]
selected <- names(forhappy)[4:6]
tempdf <- forhappy %>% select(one_of(c(dv, selected)))
names(tempdf)
names(tempdf)[-1] <- paste0("predictor", 1:length(selected))
names(tempdf)
forformula <- as.formula(paste0(dv, " ~ ."))
forformula
myformula <- as.formula(paste0(dv, " ~ ."))
myformula
fit <- randomForest(formula = myformula, data = tempdf, importance = T)
names(fit)
fit$importace
fit
fit <- randomForest(formula = myformula, data = tempdf, importance = TRUE)
fit$importace
names(fit)
fit$importaceSD
fit$localImportance
fit$coefs
fit
names(fit)
fit$rsq
importance(fit, scale=T)
?importance
importance(fit, scale=T)[,1]
dv <- names(forhappy)[3]
selected <- names(forhappy)[4:6]
tempdf <- forhappy %>% select(one_of(c(dv, selected)))
names(tempdf)[-1] <- paste0("predictor", 1:length(selected))
myformula <- as.formula(paste0(dv, " ~ ."))
fit <- randomForest(formula = myformula, data = tempdf, importance = TRUE)
output <- importance(fit, scale=T)[,1]
output
output[output < 0] <- 0
output
output <- output * 100/sum(output)
output
output<-data.frame(Predictors=selected, Importance = output, stringsAsFactors=F)
output
row.names(output) <- NULL
output
runApp()
runApp()
?tableOutput
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
dv <- names(forhappy)[3]
selected <- names(forhappy)[4:6]
tempdf <- forhappy %>% select(one_of(c(dv, selected)))
names(tempdf)[-1] <- paste0("predictor", 1:length(selected))
myformula <- as.formula(paste0(dv, " ~ ."))
fit <- randomForest(formula = myformula, data = tempdf, importance = TRUE)
output <- importance(fit, scale = T)[,1]
output[output < 0] <- 0
output <- output * 100/sum(output)
output <- data.frame(Predictors=selected, Importance = output, stringsAsFactors=F)
output
row.names(output) <- NULL
fit$rsq
mypredicted = predict(fit)
mypredicted
names(fit)
fit$y
rmse
rmse = sqrt(mean((fit$y-fit$predicted)^2))
rmse
cbind(fit$y, fit$predicted)
dv <- names(forhappy)[2]
dv
dv <- names(forhappy)[2]
selected <- names(forhappy)[4:6]
tempdf <- forhappy %>% select(one_of(c(dv, selected)))
names(tempdf)[-1] <- paste0("predictor", 1:length(selected))
myformula <- as.formula(paste0(dv, " ~ ."))
fit <- randomForest(formula = myformula, data = tempdf, importance = TRUE)
output <- importance(fit, scale = T)[,1]
output[output < 0] <- 0
output <- output * 100/sum(output)
output <- data.frame(Predictors=selected, Importance = output, stringsAsFactors=F)
row.names(output) <- NULL
fit$rsq
cbind(fit$y, fit$predicted)
rmse = sqrt(mean((fit$y-fit$predicted)^2))
rmse
names(fit)
runApp()
?renderText
runApp()
runApp()
runApp()
happy_predictors
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("RSQLite")
install.packages('rsconnect')
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rnaturalearth)
library(leaflet)
library(ggplot2)
runApp()
runApp()
runApp()
runApp()
runApp()
mycountry <- "Russia"
myindicator <- "Population growth (annual %)"
temp <- trends %>%
filter(Country %in% mycountry) %>%
filter(Indicator %in% myindicator2) %>%
select(Year, Mean_Centered_Score, Z_Score)
View(temp)
formaps <- read_csv("World Dev Indic Final Raw.csv")
# names(formaps)
# Fixing Ivory Cost's name in both 'formap' and 'fortrends'
countries <- rnaturalearth::countries110
countries$name[32] <- "Ivory Coast"
my177 <- data.frame(Country = countries$name, stringsAsFactors = F)
#------------------------------------
# leaflet object to build the map
leaflet_map <- leaflet(countries, options = leafletOptions(minZoom = 2))
map_indicators <- unique(formaps$Indicator) # For user to select indicator
map_years <- unique(formaps$Year)           # For user to select year
#------------------------------------------------------------------------
# For trends, i.e., showing changes over time
#------------------------------------------------------------------------
fortrends <- read_csv("World Dev Indic Final Z.csv")
names(fortrends)[4] <- "Z_Score"
names(fortrends)[5] <- "Mean_Centered_Score"
trend_countries <- unique(fortrends$Country)    # For user to select country
trend_indicators <- unique(fortrends$Indicator) # For user to select indicator
#------------------------------------------------------------------------
# For driver analysis of Happiness
#------------------------------------------------------------------------
forhappy <- read_csv("Happiness Final.csv")
# names(forhappy)
happy_dvs <- names(forhappy)[2:3]                      # For user to pick the DV
happy_predictors <- names(forhappy)[4:ncol(forhappy)] # For user to pick predictors
temp <- trends %>%
filter(Country %in% mycountry) %>%
filter(Indicator %in% myindicator2) %>%
select(Year, Mean_Centered_Score, Z_Score)
View(temp)
temp <- fortrends %>%
filter(Country %in% mycountry) %>%
filter(Indicator %in% myindicator2) %>%
select(Year, Mean_Centered_Score, Z_Score)
names(fortrends)
unique(fortrends$Country)
unique(fortrends$Indicator)
mycountry <- "Russia"
myindicator <- "Population growth (annual %)"
temp <- fortrends %>%
filter(Country %in% mycountry) %>%
filter(Indicator %in% myindicator2) %>%
select(Year, Mean_Centered_Score, Z_Score)
View(temp)
myindicator2 <- "Population growth (annual %)"
temp <- fortrends %>%
filter(Country %in% mycountry) %>%
filter(Indicator %in% myindicator2) %>%
select(Year, Mean_Centered_Score, Z_Score)
View(temp)
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
theme_economist() + scale_fill_economist()
library(ggplot2)
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
theme_economist() + scale_fill_economist()
install.packages("ggthemes")
library(ggthemes)
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
theme_economist() + scale_fill_economist()
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
name(temp)
names(temp)
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line(color = mycolor1) +
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
theme_economist() + scale_fill_economist()
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
theme_economist() + scale_fill_economist()
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme_economist() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
scale_fill_economist()
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme_economist() +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme_economist()
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme_economist() +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme_economist() +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
# scale_fill_economist()
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
#  theme_economist() +
# scale_fill_economist()
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
#  theme_economist() +
# scale_fill_economist()
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rnaturalearth)
library(leaflet)
library(ggplot2)
library(ggthemes)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rnaturalearth)
library(leaflet)
library(ggplot2)
library(ggthemes)
runApp()
runApp()
runApp()
trends_indicators
#------------------------------------------------------------------------
# For building maps
#------------------------------------------------------------------------
formaps <- read_csv("World Dev Indic Final Raw.csv")
# names(formaps)
# Fixing Ivory Cost's name in both 'formap' and 'fortrends'
countries <- rnaturalearth::countries110
countries$name[32] <- "Ivory Coast"
my177 <- data.frame(Country = countries$name, stringsAsFactors = F)
#------------------------------------
# leaflet object to build the map
leaflet_map <- leaflet(countries, options = leafletOptions(minZoom = 2))
map_indicators <- unique(formaps$Indicator) # For user to select indicator
map_years <- unique(formaps$Year)           # For user to select year
#------------------------------------------------------------------------
# For trends, i.e., showing changes over time
#------------------------------------------------------------------------
fortrends <- read_csv("World Dev Indic Final Z.csv")
names(fortrends)[4] <- "Z_Score"
names(fortrends)[5] <- "Mean_Centered_Score"
trend_countries <- unique(fortrends$Country)    # For user to select country
trend_indicators <- unique(fortrends$Indicator) # For user to select indicator
#------------------------------------------------------------------------
# For driver analysis of Happiness
#------------------------------------------------------------------------
forhappy <- read_csv("Happiness Final.csv")
# names(forhappy)
happy_dvs <- names(forhappy)[2:3]                      # For user to pick the DV
happy_predictors <- names(forhappy)[4:ncol(forhappy)] # For user to pick predictors
trends_indicators
trend_indicators
runApp()
trend_indicators <- unique(fortrends$Indicator) # For user to select indicator
trend_indicators
trend_indicators
trend_indicators
trend_indicators
runApp()
trend_indicators
trend_indicators
runApp()
runApp()
runApp()
runApp()
runApp()
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
#  theme_economist() +
# scale_fill_economist()
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
temp %>% ggplot(aes(x = Year, y = Mean_Centered_Score)) +
geom_point() +
geom_line() + # color = mycolor1
scale_x_continuous(limits = c(1992, 2016),
breaks = seq(1992, 2016, 1),
expand = c(0, 0)) +
# theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
#  theme_economist() +
# scale_fill_economist()
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinydashboard)
library(shiny)
library(ggplot2)
library(tidyverse)
library(leaflet)
library(DT)
library(randomForest)
library(shinydashboard)
library(shiny)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rnaturalearth)
library(leaflet)
library(ggplot2)
library(ggthemes)
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinydashboard)
library(shiny)
runApp()
runApp()
runApp()
