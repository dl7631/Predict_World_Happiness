expand = c(0, 0)) +
ggtitle(mycountry) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1),
legend.position = "bottom",
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
legend.title = element_blank()) +
guides(Indicator = guide_legend(nrow = 2))
temp <- fortrends %>%
filter(Country %in% mycountry) %>%
filter(Indicator %in% c(trends_indicators[2], trends_indicators[8])) %>%
select(Indicator, Year, c("Raw_Score")) %>%
arrange(Indicator)
source('C:/Users/dimitri.liakhovitski/git_proj/bc_project1/1 Shiny App/testing.R', echo=TRUE)
temp <- fortrends %>%
filter(Country %in% mycountry) %>%
filter(Indicator %in% c(trends_indicators[2], trends_indicators[8])) %>%
select(Indicator, Year, c("Raw_Score")) %>%
arrange(Indicator)
View(temp)
mycolors <- c("#f03b20", "#006837")
temp %>% ggplot(aes(x = Year, y = Raw_Score)) +
geom_point(aes(color = Indicator,
shape = Indicator)) +
geom_line(aes(color = Indicator,
linetype = Indicator)) +
scale_colour_manual(values = c(mycolor1, mycolor2)) +
scale_x_continuous(limits = c(1992, 2015),
breaks = seq(1992, 2015, 1),
expand = c(0, 0)) +
ggtitle(mycountry) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1),
legend.position = "bottom",
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
legend.title = element_blank()) +
guides(Indicator = guide_legend(nrow = 2))
runApp()
runApp()
runApp()
runApp()
runApp()
temp %>% ggplot(aes(x = Year, y = Raw_Score)) +
geom_point(aes(color = Indicator,
shape = Indicator)) +
geom_line(aes(color = Indicator,
linetype = Indicator)) +
scale_colour_manual(values = c(mycolor1, mycolor2)) +
scale_x_continuous(limits = c(1992, 2015),
breaks = seq(1992, 2015, 1),
expand = c(0, 0)) +
ggtitle(mycountry) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,hjust = 1),
legend.position = "bottom",
# axis.title.y = element_blank(),
# axis.text.y = element_blank(),
# axis.ticks.y = element_blank(),
legend.title = element_blank()) +
guides(Indicator = guide_legend(nrow = 2))
names(temp)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rnaturalearth)
library(leaflet)
library(ggplot2)
library(ggthemes)
names(forhappy)
forhappymap <- forhappy %>% select(Country, Happiness_Score)
head(forhappymap)
forhappymap <- forhappy %>% select(Country, Happiness_Score) %>%
right_join(my177, by = "Country") %>%
select(Happiness_Score) %>% unlist
forhappymap
forhappymap <- forhappy %>% select(Country, Happiness_Score) %>%
right_join(my177, by = "Country")
View(forhappymap)
dim(forhappy)
forhappymap <- forhappy %>% select(Country, Happiness_Score) %>%
right_join(my177, by = "Country") %>%
select(Happiness_Score) %>% unlist
forhappy_colors <- colorNumeric(
palette = c("#fee6ce","#e6550d"),
domain = forhappymap)(forhappymap)
forhappy_colors
runApp()
forhappymap
runApp()
runApp()
forhappy_colors
forhappy_colors <- colorNumeric(
palette = c("#fee6ce","#e6550d"),
domain = forhappymap)(forhappymap)
forhappy_colors
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(forhappy)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
names(fortrends
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(fortrends)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(googleVis)
names(forhappy)
myindicator
cars
mtcars
names(forhappy)
forhappy$Happiness_Score.html.tooltip <- forhappy$Country
names(forhappy)
forgvis <- forhappy %>% select(indic_happy, Happiness_Score, Happiness_Score.html.tooltip)
indic_happy <- names(forhappy)[4]
forgvis <- forhappy %>% select(indic_happy, Happiness_Score, Happiness_Score.html.tooltip)
forgvis
View(forgvis)
paste0(indic_happy, " vs. Happiness Score")
paste0("Happiness Score vs. ", indic_happy)
my_options <- list(width = "800px", height = "400px",
title = paste0("Happiness Score vs. ", indic_happy),
hAxis = "{title:'Weight (1000 lbs)'}",
vAxis = "{title:'Miles/(US) gallon'}")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(forgvis, options = my_options))
my_options <- list(width = "800px", height = "400px",
title = paste0("Happiness Score vs. ", indic_happy),
hAxis = "{title:'Weight (1000 lbs)'}",
vAxis = "{title:'Happiness Score'}")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(forgvis, options = my_options))
my_options <- list(width = "800px", height = "400px",
title = paste0("Happiness vs. ", indic_happy),
hAxis = "{title:indic_happy}",
vAxis = "{title:'Happiness Score'}")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(forgvis, options = my_options))
my_options <- list(width = "1000px", height = "500px",
title = paste0("Happiness vs. ", indic_happy),
hAxis = "{title:'Country Indicator}",
vAxis = "{title:'Happiness Score'}")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(forgvis, options = my_options))
my_options <- list(width = "1000px", height = "500px",
title = paste0("Happiness vs. ", indic_happy),
hAxis = "{title:'Country Indicator'}",
vAxis = "{title:'Happiness Score'}")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(forgvis, options = my_options))
my_options <- list(width = "1000px", height = "500px",
title = paste0("Happiness vs. ", indic_happy),
hAxis = "{title:'Country Indicator'}",
vAxis = "{title:'Happiness Score'}",
legend = "{position: 'none'}")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(forgvis, options = my_options))
names(forhappy)
names(forhappy)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c("Not selected", names(forhappy)[4:77])
runApp()
runApp()
runApp()
runApp()
names(forhappy)[4:77]
runApp()
runApp()
names(forhappy)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
names(forhappy)
runApp()
runApp()
runApp()
runApp()
runApp()
names(forhappy)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0("Happiness Score vs. ", input$scatter_ind)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(cor(1:5, 1:5))
cor(1:5, 1:5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ln(1)
log(1)
log(9)
log(1011)
runApp()
formaps
temp <- formaps %>% filter(Year %in% input$map_year,
Indicator %in% input$map_indicator) %>%
select(Country, Value) %>%
right_join(my177, by = "Country") %>%
select(Value) %>% unlist
temp <- formaps %>% filter(Year %in% 2013,
Indicator %in% formaps[""]) %>%
select(Belgium, Value) %>%
right_join(my177, by = "Country") %>%
select(Value) %>% unlist
names(formaps)
temp <- formaps %>% filter(Year %in% 2013,
Indicator %in% formaps[["Indicator"][10]) %>%
select(Belgium, Value) %>%
right_join(my177, by = "Country") %>%
select(Value) %>% unlist
temp <- formaps %>% filter(Year %in% 2013,
Indicator %in% formaps[["Indicator"][10]) %>%
select(Country, Value) %>%
right_join(my177, by = "Country") %>%
select(Value) %>% unlist
temp <- formaps %>% filter(Year %in% 2013,
Indicator %in% formaps[["Indicator"][10]) %>%
select(Country, Value) %>%
right_join(my177, by = "Country") %>%
select(Value) %>% unlist
my177
temp <- formaps %>% filter(Year %in% 2011,
Indicator %in% formaps[["Indicator"][10]) %>%
select(Country, Value) %>%
right_join(my177, by = "Country") %>%
select(Value) %>% unlist
runApp()
temp = 1:10
log(temp - min(temp) + 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
??read.csv
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
names(fortrends)
library(shiny)
library(shinydashboard)
library(dplyr)
library(readr)
library(rnaturalearth)
library(leaflet)
library(ggplot2)
library(ggthemes)
library(googleVis)
library(randomForest)
fortrends <- read_csv("World Dev Indic Final.csv")
names(fortrends)
formaps <- fortrends[1:4]
countries <- rnaturalearth::countries110
countries$name[32] <- "Ivory Coast"
my177 <- data.frame(Country = countries$name, stringsAsFactors = F)
fortrends <- read_csv("World Dev Indic Final.csv")
formaps <- fortrends[1:4]
# names(fortrends); head(fortrends)
# names(formaps)
# Fixing Ivory Cost's name in both 'formap' and 'fortrends'
countries <- rnaturalearth::countries110
countries$name[32] <- "Ivory Coast"
# Data frame with 177 country names as a column:
my177 <- data.frame(Country = countries$name, stringsAsFactors = F)
#------------------------------------
# leaflet object to build the map:
# Map of indicators:
leaflet_map <- leaflet(countries, options = leafletOptions(minZoom = 2)) %>%
setView(lng = 5,lat = 20, zoom = 2)   # setting the center of the map
# Map of happiness
leaflet_map_happy <- leaflet(countries, options = leafletOptions(minZoom = 2)) %>%
setView(lng = 5,lat = 20, zoom = 2)
map_indicators <- unique(formaps$Indicator) # For user to select indicator
map_years <- unique(formaps$Year)           # For user to select year
#------------------------------------------------------------------------
# For trends, i.e., showing changes over time
#------------------------------------------------------------------------
names(fortrends)
names(fortrends)[4] <- "Raw_Score"
names(fortrends)[5] <- "Z_Score"
names(fortrends)[6] <- "Mean_Centered_Score"
names(fortrends)
trends_countries <- unique(fortrends$Country)    # For user to select country
trends_indicators <- unique(fortrends$Indicator) # For user to select indicator
mycolors <- c("#E55A00", "#264283")  # 2 colors for my line plot
forhappy <- read_csv("Happiness Final.csv")
names(forhappy)
happy_dvs <- names(forhappy)[2:3]                      # For user to pick the DV
happy_predictors <- names(forhappy)[4:ncol(forhappy)] # For user to pick predictors
forhappy$Happiness_Score.html.tooltip <- forhappy$Country  # html column for gogleVis
forhappymap <- forhappy %>% select(Country, Happiness_Score) %>%
right_join(my177, by = "Country") %>%
select(Happiness_Score) %>% unlist
forhappy_colors <- colorNumeric(
palette = c("#ffffff","#e6550d"),  #ffffff # original c("#fee6ce","#e6550d")
domain = forhappymap)(forhappymap)
names(formaps)
unique(formaps$Indicator)
unique(fortrends$Indicator)
shiny::runApp()
