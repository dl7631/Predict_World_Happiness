# Leaving in the data set only indicators that have
# data from at least 160 countries
# ------------------------------------------------------
goodcodes <- counts %>% filter(n > 159) %>%
select(IndicatorCode) %>% unlist
dim(wdi14)  # 85,495
wdi14 <-  wdi14 %>% filter(IndicatorCode %in% goodcodes)
dim(wdi14)  # 19,193
# ------------------------------------------------------
# Leaving in the data set only countries
# that have the same (large) set of indicators
# ------------------------------------------------------
counts <- wdi14 %>% count(CountryName) %>% arrange(-n)
# View(counts)
badones <- c("Tuberculosis case detection rate (%, all forms)",
"Foreign direct investment, net inflows (BoP, current US$)",
"Proportion of seats held by women in national parliaments (%)",
"Fixed broadband subscriptions")
wdi14 <- wdi14 %>% filter(!IndicatorName %in% badones)
dim(wdi14)  # 18,538
counts <- wdi14 %>% count(CountryName) %>% arrange(-n)
goodones <- counts %>% filter(n > 111) %>%
select(CountryName) %>% unlist
wdi14 <- wdi14 %>% filter(CountryName %in% goodones)
dim(wdi14)  # 15,344
counts <- wdi14 %>% count(CountryName) %>% arrange(-n)
# View(counts)   # Now, each country has data on 112 indicators
# ------------------------------------------------------
# Shortening indicator names
# ------------------------------------------------------
library(stringr)
unique(wdi14$IndicatorName)
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = " \\(modeled ILO estimate\\)",
replacement = "")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "total merchandise exports",
replacement = "total")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "Merchandise imports by the reporting economy, residual",
replacement = "Merchandies imports by economy, residual")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "Merchandise imports by the reporting economy",
replacement = "Merchandise imports by economy")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = " of total merchandise imports",
replacement = "of total")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "population",
replacement = "pop.")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "by the reporting economy",
replacement = "by economy")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "pop\\. with access",
replacement = "pop\\.")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "0=less disclosure to 10=more disclosure",
replacement = "0=less to 10=more")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "participation",
replacement = "particip\\.")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "Unemployment",
replacement = "Unemp\\.")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "modeled estimate\\, ",
replacement = "")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "of total",
replacement = "of ttl\\.")
# unique(wdi14$IndicatorName)
# ------------------------------------------------------
# Reshaping the data by spreading 'IndicatorName'
# ------------------------------------------------------
wdi14 <- wdi14 %>% select(CountryName, IndicatorName, Value)
wdi14_spr <- spread(wdi14, key = IndicatorName, value = Value)
dim(wdi14_spr)
# names(wdi14_spr)
# ------------------------------------------------------
# Checking that all indicators have variance > 0
# ------------------------------------------------------
min(sapply(wdi14_spr[-1], mean))
max(sapply(wdi14_spr[-1], mean))
mean(sapply(wdi14_spr[-1], mean))
min(sapply(wdi14_spr[-1], sd))
max(sapply(wdi14_spr[-1], sd))
mean(sapply(wdi14_spr[-1],sd))
# We are good - all predictors have some variance
# --------------------------------------------------------------------------------
# Reading in world happiness report data for 2015
# I downloaded from here: https://www.kaggle.com/unsdsn/world-happiness/data
# file "2015.csv"
# --------------------------------------------------------------------------------
hap <- read_csv("Happiness 2015.csv")
# str(hap)
head(hap)
# Removing some columns I don't need:
hap <- hap[c(1, 3, 4)]
names(hap)
# ------------------------------------------------------
# Merging with wdi14_spr by country name, but
# checking those names first
# ------------------------------------------------------
names14 <- sort(wdi14_spr$CountryName)
length(names14)   # 137
namesHap <- sort(hap$Country)
matching14names <- names14[names14 %in% namesHap]
nonmatching14names <- names14[!names14 %in% namesHap]
# Replacing some country names in wdi14 to match those in Happiness:
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Bosnia and Herz."] <- "Bosnia and Herzegovina"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Central African Rep."] <- "Central African Republic"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Congo"] <- "Congo (Brazzaville)"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% nonmatching14names[6]] <- "Ivory Coast"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Czech Rep."] <- "Czech Republic"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Dem. Rep. Congo"] <- "Congo (Kinshasa)"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Dominican Rep."] <- "Dominican Republic"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Lao PDR"] <- "Laos"
names14 <- sort(wdi14_spr$CountryName)
length(names14)   # 137
namesHap <- sort(hap$Country)
matching14names <- names14[names14 %in% namesHap]
nonmatching14names <- names14[!names14 %in% namesHap]
nonmatching14names
# We will have to loose these 6 countries because we have no happiness index for them
# I am removing their rows
nrow(wdi14_spr)  # 137
wdi14_spr <- wdi14_spr %>% filter(!CountryName %in% nonmatching14names)
nrow(wdi14_spr)  # 131
# Updating some var names a bit:
names(hap) <- c("Country", "Happiness_Rank", "Happiness_Score")
names(wdi14_spr)[1] <- "Country"
nrow(wdi14_spr)  # 131
happy <- left_join(wdi14_spr, hap, by = "Country")
nrow(happy)  # 131
# head(happy)
# Reorder the columns a bit:
# names(happy)
happy <- happy[c(1, (ncol(happy) - 1), ncol(happy), 2:(ncol(happy) - 2))]
# Checking correlations among variables:
dim(happy)
View(round(cor(happy[-1]), 2))
# Removing some highly colinear predictors based on these correlations:
badcolumns <- c(-5, -6, -7, -12, -16, -20, -21, -22, -23, -24, -25, -28,
-31, -32, -34, -41, -47, -48, -49, -52, -54, -57, -58,
-61, -64, -65, -68, -69, -78, -88, -104, -109, -110, -111, -112,
-114)
happy <- happy[, badcolumns]
# Removing a couple more columns
happy <- happy[, c(-25, -26)]
dim(happy)  # 77 COLUMNS LEFT
# write.csv(happy, "Happiness Final.csv", row.names = F, na = "")
dim(wdi)      # 3,222,358
count(wdi, Year) %>% arrange(-Year)
wdi <- wdi %>% filter(Year > 1992)
dim(wdi)      # 1,952,185
#------------------------------------------------------
wdi <- wdi %>% filter(Year < 2015)
dim(wdi)  # 1,940,922
dim(wdi)  # 1,940,922
badcodes <- counts$IndicatorCode[counts$NumCountries < 151]
names(counts)
View(counts)
library(tidyverse)
library(ggplot2)
wdi <- read_csv("indicators.csv")
dim(wdi)   # 5,656,458 rows
names(wdi)
#------------------------------------------------------
# Grabbing 177 countries whose coords we have
# in our maps polygons
#------------------------------------------------------
# rm(list(temp, temp1, temp2))
library(rnaturalearth)
mynames <- rnaturalearth::countries110$name
length(mynames)  # 177
mynames[32] <- "Ivory Coast"
wdinames <- unique(wdi$CountryName)
length(wdinames)  # 247
wdi <- read_csv("indicators.csv")
dim(wdi)   # 5,656,458 rows
names(wdi)
#------------------------------------------------------
# Grabbing 177 countries whose coords we have
# in our maps polygons
#------------------------------------------------------
# rm(list(temp, temp1, temp2))
library(rnaturalearth)
mynames <- rnaturalearth::countries110$name
length(mynames)  # 177
mynames[32] <- "Ivory Coast"
wdinames <- unique(wdi$CountryName)
length(wdinames)  # 247
goodwdinames <- wdinames[wdinames %in% mynames]
length(goodwdinames) # 145
# not matched mynames:
notmatched <- mynames[!mynames %in% goodwdinames]
wdi$CountryName[wdi$CountryName %in% "Bahamas, The"] <- notmatched[3]
wdi$CountryName[wdi$CountryName %in% "Bosnia and Herzegovina"] <- notmatched[4]
wdi$CountryName[wdi$CountryName %in% "Brunei Darussalam"] <- notmatched[5]
wdi$CountryName[wdi$CountryName %in% "Central African Republic"] <- notmatched[6]
wdi$CountryName[wdi$CountryName %in% "Cote d'Ivoire"] <- "Ivory Coast"
wdi$CountryName[wdi$CountryName %in% "Congo, Dem. Rep."] <- notmatched[8]
wdi$CountryName[wdi$CountryName %in% "Congo, Rep."] <- notmatched[9]
wdi$CountryName[wdi$CountryName %in% "Czech Republic"] <- notmatched[11]
wdi$CountryName[wdi$CountryName %in% "Dominican Republic"] <- notmatched[12]
wdi$CountryName[wdi$CountryName %in% "Egypt, Arab Rep."] <- notmatched[13]
wdi$CountryName[wdi$CountryName %in% "Gambia, The"] <- notmatched[15]
wdi$CountryName[wdi$CountryName %in% "Equatorial Guinea"] <- notmatched[16]
wdi$CountryName[wdi$CountryName %in% "Iran, Islamic Rep."] <- notmatched[17]
wdi$CountryName[wdi$CountryName %in% "Kyrgyz Republic"] <- notmatched[18]
wdi$CountryName[wdi$CountryName %in% "Korea, Rep."] <- notmatched[19]
wdi$CountryName[wdi$CountryName %in% "Macedonia, FYR"] <- notmatched[20]
wdi$CountryName[wdi$CountryName %in% "Korea, Dem. Rep."] <- notmatched[21]
wdi$CountryName[wdi$CountryName %in% "West Bank and Gaza"] <- notmatched[22]
wdi$CountryName[wdi$CountryName %in% "Russian Federation"] <- notmatched[23]
wdi$CountryName[wdi$CountryName %in% "South Sudan"] <- notmatched[25]
wdi$CountryName[wdi$CountryName %in% "Solomon Islands"] <- notmatched[26]
wdi$CountryName[wdi$CountryName %in% "Slovak Republic"] <- notmatched[28]
wdi$CountryName[wdi$CountryName %in% "Syrian Arab Republic"] <- notmatched[29]
wdi$CountryName[wdi$CountryName %in% "Venezuela, RB"] <- notmatched[31]
wdi$CountryName[wdi$CountryName %in% "Yemen, Rep."] <- notmatched[32]
wdinames2 <- sort(unique(wdi$CountryName))
goodwdinames2 <- wdinames2[wdinames2 %in% mynames]
length(goodwdinames2)  # 170
# not matched mynames - 7 Countries I have in polygons, but no indicators for them
notmatchedmynames <- mynames[!mynames %in% goodwdinames2]
# What wdi names are not part of mynames?
notmatchedwdinames <- wdinames2[!wdinames2 %in% mynames]
dim(wdi)   # 5,656,458
wdi <- wdi %>% filter(!CountryName %in% notmatchedwdinames)
dim(wdi)   # 4,393,635
length(unique(wdi$CountryName))  # 170 countries
counts <- wdi %>%
group_by(IndicatorCode, IndicatorName) %>%
summarise(NumCountries = n_distinct(CountryName),
NumYears     = n_distinct(Year),
FirstYear    = min(Year),
LastYear     = max(Year))
# Note - $ being replaced with dollar to avoid MathJax issue
counts$IndicatorName <- gsub("\\$", "dollar", counts$IndicatorName)
# View(counts)
#------------------------------------------------------
# Removing indicators with LastYear < 2014
#------------------------------------------------------
badcodes <- counts$IndicatorCode[counts$LastYear < 2014]
wdi <- wdi %>% filter(!IndicatorCode %in% badcodes)
dim(wdi)      # 3,222,358
unique(wdi$Year)
names(wdi)
wdi14 <- wdi %>% filter(Year == 2014)
names(wdi14)
# unique(wdi14$Year)
dim(wdi14) # 85,495 rows
dim(wdi)      # 3,222,358
count(wdi, Year) %>% arrange(-Year)
wdi <- wdi %>% filter(Year > 1992)
dim(wdi)      # 1,952,185
wdi <- wdi %>% filter(Year < 2015)
dim(wdi)  # 1,940,922
dim(wdi)  # 1,940,922
names(counts)
badcodes <- counts$IndicatorCode[counts$NumCountries < 151]
wdi <- wdi %>% filter(!IndicatorCode %in% badcodes)
dim(wdi)      # 1,140,686
badcodes <- counts$IndicatorCode[counts$FirstYear > 2004]
wdi <- wdi %>% filter(!IndicatorCode %in% badcodes)
dim(wdi)      # 1,062,670
badcodes <- counts$IndicatorCode[counts$NumYears < 22]
wdi <- wdi %>% filter(!IndicatorCode %in% badcodes)
dim(wdi)      # 1,028,131
counts <- wdi %>%
group_by(IndicatorCode, IndicatorName) %>%
summarise(NumCountries = n_distinct(CountryName),
NumYears     = n_distinct(Year),
FirstYear    = min(Year),
LastYear     = max(Year))
# Note - $ being replaced with dollar to avoid MathJax issue
counts$IndicatorName <- gsub("\\$", "dollar", counts$IndicatorName)
ind1 <- c('AG.LND.TOTL.K2','BX.KLT.DINV.CD.WD','BX.KLT.DINV.WD.GD.ZS','EN.POP.DNST',
'FP.CPI.TOTL','FP.CPI.TOTL.ZG','IT.CEL.SETS.P2','IT.MLT.MAIN.P2','IT.NET.USER.P2',
'MS.MIL.XPND.GD.ZS','NE.CON.GOVT.ZS','NE.CON.PETC.ZS','NE.CON.TETC.CD','NE.CON.TETC.KD.ZG',
'NE.DAB.TOTL.ZS','NE.EXP.GNFS.ZS','NE.IMP.GNFS.KD.ZG','NE.IMP.GNFS.ZS','NE.TRD.GNFS.ZS',
'NV.AGR.TOTL.ZS','NV.IND.TOTL.ZS','NV.SRV.TETC.ZS','NY.GDP.DEFL.KD.ZG','NY.GDP.MKTP.KD.ZG',
'NY.GDP.PCAP.CD','NY.GDP.PCAP.KD.ZG','SE.PRM.AGES','SE.PRM.CMPT.FE.ZS','SE.PRM.CMPT.MA.ZS',
'SE.PRM.DURS','SE.PRM.ENRL.FE.ZS','SE.PRM.ENRR.FE','SE.PRM.ENRR.MA','SE.PRM.TCHR.FE.ZS',
'SE.SEC.ENRR.FE','SE.SEC.ENRR.MA','SE.SEC.TCHR.FE.ZS','SE.TER.ENRR.FE','SE.TER.ENRR.MA',
'SE.XPD.TOTL.GD.ZS','SH.DYN.MORT','SH.DYN.NMRT','SH.H2O.SAFE.RU.ZS','SH.H2O.SAFE.UR.ZS',
'SH.H2O.SAFE.ZS','SH.IMM.IDPT','SH.IMM.MEAS','SH.MED.PHYS.ZS','SH.MMR.RISK.ZS','SH.STA.ACSN',
'SH.STA.ACSN.RU','SH.STA.ACSN.UR','SH.STA.BRTC.ZS','SH.STA.MMRT','SH.TBS.INCD','SL.AGR.EMPL.ZS',
'SL.IND.EMPL.ZS','SL.SRV.EMPL.ZS','SL.TLF.ACTI.1524.FE.ZS','SL.TLF.ACTI.1524.MA.ZS',
'SL.TLF.CACT.FM.ZS','SL.TLF.TOTL.FE.ZS','SL.UEM.1524.FE.ZS','SL.UEM.1524.MA.ZS',
'SL.UEM.TOTL.FE.ZS','SL.UEM.TOTL.MA.ZS','SP.POP.0014.TO.ZS','SP.POP.1564.TO.ZS',
'SP.POP.65UP.TO.ZS','SP.POP.GROW','SP.URB.GROW','SP.URB.TOTL.IN.ZS')
dim(wdi)      # 1,028,131
wdi <- wdi %>% filter(IndicatorCode %in% ind1)
dim(wdi)      # 229,227
#------------------------------------------------------
# Leaving only indicators I want in my Shiny App
#------------------------------------------------------
ind2 <- c('BX.KLT.DINV.WD.GD.ZS','FP.CPI.TOTL','FP.CPI.TOTL.ZG','IT.CEL.SETS.P2',
'IT.MLT.MAIN.P2','IT.NET.USER.P2','NE.CON.TETC.KD.ZG','NE.EXP.GNFS.ZS',
'NE.IMP.GNFS.ZS','NE.TRD.GNFS.ZS','NY.GDP.DEFL.KD.ZG','NY.GDP.MKTP.KD.ZG',
'NY.GDP.PCAP.CD','SE.PRM.ENRL.FE.ZS','SE.PRM.ENRR.FE','SE.PRM.ENRR.MA',
'SH.DYN.MORT','SH.DYN.NMRT','SH.H2O.SAFE.ZS','SH.IMM.IDPT','SH.MED.PHYS.ZS',
'SH.MMR.RISK.ZS','SH.STA.ACSN','SH.STA.MMRT','SH.TBS.INCD','SL.TLF.TOTL.FE.ZS',
'SL.UEM.TOTL.FE.ZS','SL.UEM.TOTL.MA.ZS','SP.POP.0014.TO.ZS','SP.POP.1564.TO.ZS',
'SP.POP.65UP.TO.ZS','SP.POP.GROW','SP.URB.GROW','SP.URB.TOTL.IN.ZS')
dim(wdi)      # 229,227
wdi <- wdi %>% filter(IndicatorCode %in% ind2)
dim(wdi)      # 116,636
unique(wdi$IndicatorName)
wdi$IndicatorName[wdi$IndicatorName %in% unique(wdi$IndicatorName)[5]] <-
"Improved sanitation facilities (% of pop. with access)"
wdi$IndicatorName[wdi$IndicatorName %in% unique(wdi$IndicatorName)[6]] <-
"Improved water source (% of pop. with access)"
wdi$IndicatorName[wdi$IndicatorName %in% unique(wdi$IndicatorName)[10]] <-
"Maternal mortality ratio per 100K live births"
wdi$IndicatorName[wdi$IndicatorName %in% unique(wdi$IndicatorName)[14]] <-
"% of students in primary ed. who are female"
wdi$IndicatorName[wdi$IndicatorName %in% unique(wdi$IndicatorName)[33]] <-
"Final consumption expenditure (annual % growth)"
unique(wdi$IndicatorName)
wdi <- wdi %>% group_by(IndicatorName, CountryName) %>%
mutate(Value.z = (Value - mean(Value, na.rm = T))/sd(Value, na.rm = T),
Value.Centered = Value - mean(Value, na.rm = T)) %>%
ungroup
# Check that the sum of Value.z for each indicator/contry is 0:
temp <- wdi %>% group_by(IndicatorName, CountryName) %>%
summarize(summa = sum(Value.z, na.rm = T),
std = sd(Value.z, na.rm = T)) %>%
mutate(summa = round(summa, 1), std = round(std, 1))
# View(temp)
sum(temp$summa) == 0  # it should be 0 even without na.rm = T
sum(temp$std); length(unique(wdi$IndicatorName)) *
length(unique(wdi$CountryName))  # it should be 0 even without na.rm = T
### Replacing NA in Value.z for all cases when Value is not NA with a 0
wdi$Value.z[is.na(wdi$Value.z) & !is.na(wdi$Value)] <- 0
sum(temp$summa) == 0
sum(temp$std)
write.csv(wdi, "x test.csv", row.names = F)
names(wdi)
dim(wdi)  # 116,636
wdi <- complete(wdi, CountryName, Year, IndicatorName)
dim(wdi)  # 127,160
names(wdi)[c(1, 3)] <- c("Country", "Indicator")
library(tidyverse)
library(ggplot2)
###########################################################################
# In this code, I am merging 2014 indicators with 2015 Happiness index data
###########################################################################
dim(wdi14) # 85,495 rows
# View(count(wdi14, IndicatorName))
# View(wdi14 %>% distinct(CountryName))
# ------------------------------------------------------
# Counting number of countries that have each indicator
# ------------------------------------------------------
counts <- wdi14 %>% count(IndicatorCode) %>% arrange(-n)
# View(counts)
# ------------------------------------------------------
# Leaving in the data set only indicators that have
# data from at least 160 countries
# ------------------------------------------------------
goodcodes <- counts %>% filter(n > 159) %>%
select(IndicatorCode) %>% unlist
dim(wdi14)  # 85,495
wdi14 <-  wdi14 %>% filter(IndicatorCode %in% goodcodes)
dim(wdi14)  # 19,193
# ------------------------------------------------------
# Leaving in the data set only countries
# that have the same (large) set of indicators
# ------------------------------------------------------
counts <- wdi14 %>% count(CountryName) %>% arrange(-n)
# View(counts)
badones <- c("Tuberculosis case detection rate (%, all forms)",
"Foreign direct investment, net inflows (BoP, current US$)",
"Proportion of seats held by women in national parliaments (%)",
"Fixed broadband subscriptions")
wdi14 <- wdi14 %>% filter(!IndicatorName %in% badones)
dim(wdi14)  # 18,538
counts <- wdi14 %>% count(CountryName) %>% arrange(-n)
goodones <- counts %>% filter(n > 111) %>%
select(CountryName) %>% unlist
wdi14 <- wdi14 %>% filter(CountryName %in% goodones)
dim(wdi14)  # 15,344
counts <- wdi14 %>% count(CountryName) %>% arrange(-n)
# View(counts)   # Now, each country has data on 112 indicators
# ------------------------------------------------------
# Shortening indicator names
# ------------------------------------------------------
library(stringr)
unique(wdi14$IndicatorName)
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = " \\(modeled ILO estimate\\)",
replacement = "")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "total merchandise exports",
replacement = "total")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "Merchandise imports by the reporting economy, residual",
replacement = "Merchandies imports by economy, residual")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "Merchandise imports by the reporting economy",
replacement = "Merchandise imports by economy")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = " of total merchandise imports",
replacement = "of total")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "population",
replacement = "pop.")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "by the reporting economy",
replacement = "by economy")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "pop\\. with access",
replacement = "pop\\.")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "0=less disclosure to 10=more disclosure",
replacement = "0=less to 10=more")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "participation",
replacement = "particip\\.")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "Unemployment",
replacement = "Unemp\\.")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "modeled estimate\\, ",
replacement = "")
wdi14$IndicatorName <- str_replace_all(wdi14$IndicatorName,
pattern = "of total",
replacement = "of ttl\\.")
# unique(wdi14$IndicatorName)
# ------------------------------------------------------
# Reshaping the data by spreading 'IndicatorName'
# ------------------------------------------------------
wdi14 <- wdi14 %>% select(CountryName, IndicatorName, Value)
wdi14_spr <- spread(wdi14, key = IndicatorName, value = Value)
dim(wdi14_spr)
# names(wdi14_spr)
# ------------------------------------------------------
# Checking that all indicators have variance > 0
# ------------------------------------------------------
min(sapply(wdi14_spr[-1], mean))
max(sapply(wdi14_spr[-1], mean))
mean(sapply(wdi14_spr[-1], mean))
min(sapply(wdi14_spr[-1], sd))
max(sapply(wdi14_spr[-1], sd))
mean(sapply(wdi14_spr[-1],sd))
# We are good - all predictors have some variance
# --------------------------------------------------------------------------------
# Reading in world happiness report data for 2015
# I downloaded from here: https://www.kaggle.com/unsdsn/world-happiness/data
# file "2015.csv"
# --------------------------------------------------------------------------------
hap <- read_csv("Happiness 2015.csv")
# str(hap)
head(hap)
# Removing some columns I don't need:
hap <- hap[c(1, 3, 4)]
names(hap)
# ------------------------------------------------------
# Merging with wdi14_spr by country name, but
# checking those names first
# ------------------------------------------------------
names14 <- sort(wdi14_spr$CountryName)
length(names14)   # 137
namesHap <- sort(hap$Country)
matching14names <- names14[names14 %in% namesHap]
nonmatching14names <- names14[!names14 %in% namesHap]
# Replacing some country names in wdi14 to match those in Happiness:
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Bosnia and Herz."] <- "Bosnia and Herzegovina"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Central African Rep."] <- "Central African Republic"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Congo"] <- "Congo (Brazzaville)"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% nonmatching14names[6]] <- "Ivory Coast"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Czech Rep."] <- "Czech Republic"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Dem. Rep. Congo"] <- "Congo (Kinshasa)"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Dominican Rep."] <- "Dominican Republic"
wdi14_spr$CountryName[wdi14_spr$CountryName %in% "Lao PDR"] <- "Laos"
names14 <- sort(wdi14_spr$CountryName)
length(names14)   # 137
namesHap <- sort(hap$Country)
matching14names <- names14[names14 %in% namesHap]
nonmatching14names <- names14[!names14 %in% namesHap]
nonmatching14names
# We will have to loose these 6 countries because we have no happiness index for them
# I am removing their rows
nrow(wdi14_spr)  # 137
wdi14_spr <- wdi14_spr %>% filter(!CountryName %in% nonmatching14names)
nrow(wdi14_spr)  # 131
# Updating some var names a bit:
names(hap) <- c("Country", "Happiness_Rank", "Happiness_Score")
names(wdi14_spr)[1] <- "Country"
nrow(wdi14_spr)  # 131
happy <- left_join(wdi14_spr, hap, by = "Country")
nrow(happy)  # 131
# head(happy)
# Reorder the columns a bit:
# names(happy)
happy <- happy[c(1, (ncol(happy) - 1), ncol(happy), 2:(ncol(happy) - 2))]
# Checking correlations among variables:
dim(happy)
View(round(cor(happy[-1]), 2))
# Removing some highly colinear predictors based on these correlations:
badcolumns <- c(-5, -6, -7, -12, -16, -20, -21, -22, -23, -24, -25, -28,
-31, -32, -34, -41, -47, -48, -49, -52, -54, -57, -58,
-61, -64, -65, -68, -69, -78, -88, -104, -109, -110, -111, -112,
-114)
happy <- happy[, badcolumns]
# Removing a couple more columns
happy <- happy[, c(-25, -26)]
dim(happy)  # 77 COLUMNS LEFT
# write.csv(happy, "Happiness Final.csv", row.names = F, na = "")
